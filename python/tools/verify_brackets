#!/usr/bin/env python
import optparse

def valid_open_bracket(char):
    if char == "(" or char == "[" or char == "{":
        return True
    return False

def valid_close_bracket(char):
    if char == ")" or char == "]" or char == "}":
        return True
    return False

def valid_bracket(char):
    if valid_open_bracket(char) or valid_close_bracket(char):
        return True
    return False

def brackets_type(char):
    if   char == "(" or char == ")":
        return "("
    elif char == "{" or char == "}":
        return "{"
    elif char == "[" or char == "]":
        return "["

def verify_brackets(phrase):
    brackets = {
        "(": 0,
        "[": 0,
        "{": 0,
    }

    if len(phrase) == 0:
        return False

    for char in phrase:
        if valid_bracket(char):
            if valid_open_bracket(char):
                brackets[brackets_type(char)] += 1
            else:
                brackets[brackets_type(char)] -= 1

            if brackets[brackets_type(char)] < 0:
                return False

    for key, value in brackets.items():
        if value != 0:
            return False

    return True

def main():
    usage  = "Usage: %prog [options] PHRASE ...\n"
    usage += "Verify if PHRASE contains a valid numbers of brackets ()[]{}"

    parser = optparse.OptionParser(usage=usage)

    opts, args = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        exit()

    phrase = args[0]

    exit(not verify_brackets(phrase))

if __name__ == "__main__":
    main()
